name: Deploy
on:
  workflow_run:
    workflows: ['Build']
    types:
      - completed

jobs:
  checks:
    name: Deploy checks
    runs-on: ubuntu-latest
    outputs:
      parameters: ${{ steps.parameters.outputs.result }}

    steps:
      - if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        run: echo 'The triggering workflow failed' && exit 1

      - name: Determine deploy parameters
        id: parameters
        uses: actions/github-script@v7
        with:
          script: |
            const eventType = context.payload.workflow_run.event;
            const isFork = context.payload.workflow_run.repository.fork;

            let parameters;

            console.log({eventType, isFork});

            if (eventType == "push") {
              const branch = context.payload.workflow_run.head_branch;
              console.log({branch});
              const shouldDeploy = !isFork && branch == "main";
              parameters = {
                event: "branch",
                shouldDeploy,
                environment: "prod",
                stage: "",
                pagesBranch: "main"
              };
            } else if (eventType == "pull_request") {
              let pull_number = context.payload.workflow_run.pull_requests[0]?.number;
              if(!pull_number) {
                const response = await github.rest.search.issuesAndPullRequests({q: 'repo:${{ github.repository }} is:pr sha:${{ github.event.workflow_run.head_sha }}',per_page: 1,})
                const items = response.data.items
                if (items.length < 1) {
                  throw new Error("No pull request found for the commit")
                }
                const pullRequestNumber = items[0].number
                console.info("Pull request number is", pullRequestNumber)
                pull_number = pullRequestNumber
              }
              const {data: pr} = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number
              });

              console.log({pull_number});

              parameters = {
                event: "pr",
                pr_number: pull_number,
                shouldDeploy: true,
                environment: "dev",
                stage: `pr-${pull_number}`,
                pagesBranch: `pr-${pull_number}`
              };
            } else if (eventType == "release") {
              parameters = {
                shouldDeploy: false
              };
            }

            console.log(parameters);
            return parameters;

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: checks
    if: ${{ fromJson(needs.checks.outputs.parameters).shouldDeploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load parameters
        id: parameters
        uses: actions/github-script@v7
        with:
          script: |
            const json = `${{ needs.checks.outputs.parameters }}`;
            const parameters = JSON.parse(json);
            core.setOutput("shouldDeploy", parameters.shouldDeploy);
            core.setOutput("event", parameters.event);
            core.setOutput("pagesBranch", parameters.pagesBranch);
            core.setOutput("environment", parameters.environment);
            core.setOutput("stage", parameters.stage);

      - run: |
          echo "Starting docs deployment for event: ${{ steps.parameters.outputs.event }}, environment: ${{ steps.parameters.outputs.environment }}, stage: ${{ steps.parameters.outputs.stage }}"

      - name: Download artifact
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.find((artifact) => artifact.name == "build-output");
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/build-output.zip`, Buffer.from(download.data));

      - name: Unzip artifact
        run: unzip "${{ github.workspace }}/build-output.zip" -d "${{ github.workspace }}/dist"

      - name: Deploy App
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_STATE_POSTGRES_CONN_STR: ${{ secrets.TF_STATE_POSTGRES_CONN_STR }}
          DIST_DIR: ${{ github.workspace }}/dist
          ENVIRONMENT: ${{ steps.parameters.outputs.environment }}
          VMETRICS_API_TOKEN: ${{ secrets.VMETRICS_API_TOKEN }}
          STAGE: ${{ steps.parameters.outputs.stage }}
          TF_VAR_pages_branch: ${{ steps.parameters.outputs.pagesBranch }}
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tg_version: '0.58.12'
          tofu_version: '1.7.1'
          tg_dir: 'deployment/modules/cloudflare/'
          tg_command: 'run-all apply'

      - name: Deploy Backend Output
        id: terraform-backend-output
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_STATE_POSTGRES_CONN_STR: ${{ secrets.TF_STATE_POSTGRES_CONN_STR }}
          DIST_DIR: ${{ github.workspace }}/dist
          ENVIRONMENT: ${{ steps.parameters.outputs.environment }}
          VMETRICS_API_TOKEN: ${{ secrets.VMETRICS_API_TOKEN }}
          STAGE: ${{ steps.parameters.outputs.stage }}
          TF_VAR_pages_branch: ${{ steps.parameters.outputs.pagesBranch }}
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tg_version: '0.58.12'
          tofu_version: '1.7.1'
          tg_dir: 'deployment/modules/cloudflare/backend'
          tg_command: 'output -json'

      - name: Deploy Frontend Output
        id: terraform-frontend-output
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_STATE_POSTGRES_CONN_STR: ${{ secrets.TF_STATE_POSTGRES_CONN_STR }}
          DIST_DIR: ${{ github.workspace }}/dist
          ENVIRONMENT: ${{ steps.parameters.outputs.environment }}
          VMETRICS_API_TOKEN: ${{ secrets.VMETRICS_API_TOKEN }}
          STAGE: ${{ steps.parameters.outputs.stage }}
          TF_VAR_pages_branch: ${{ steps.parameters.outputs.pagesBranch }}
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tg_version: '0.58.12'
          tofu_version: '1.7.1'
          tg_dir: 'deployment/modules/cloudflare/frontend'
          tg_command: 'output -json'

      - name: Output Cleaning
        id: clean
        run: |
          TG_BACKEND_OUT=$(echo '${{ steps.terraform-backend-output.outputs.tg_action_output }}' | sed 's|%0A|\n|g ; s|%3C|<|g' | jq -c .)
          TG_FRONTEND_OUT=$(echo '${{ steps.terraform-frontend-output.outputs.tg_action_output }}' | sed 's|%0A|\n|g ; s|%3C|<|g' | jq -c .)
          echo "backend=$TG_BACKEND_OUT" >> $GITHUB_OUTPUT
          echo "frontend=$TG_FRONTEND_OUT" >> $GITHUB_OUTPUT

      - name: Set Backend URL
        run: |
          ESCAPED_REPLACE=$(printf '%s\n' '${{ fromJson(steps.clean.outputs.backend).data_api_url.value }}' | sed -e 's/[\/&]/\\&/g')
          find dist/frontend/_app/immutable -type f -exec sed -i "s/PUBLIC_IMMICH_BACKEND_URL/$ESCAPED_REPLACE/g" {} +

      - name: Publish Frontend to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN_PAGES_UPLOAD }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ fromJson(steps.clean.outputs.frontend).pages_project_name.value }}
          directory: 'dist/frontend'
          branch: ${{ steps.parameters.outputs.pagesBranch }}
          wranglerVersion: '3'

      - name: Comment
        uses: actions-cool/maintain-one-comment@v3
        if: ${{ steps.parameters.outputs.event == 'pr' }}
        with:
          number: ${{ fromJson(needs.checks.outputs.parameters).pr_number }}
          body: |
            ðŸš€ Preview deployed to:
            - Frontend URL: https://${{ fromJson(steps.clean.outputs.frontend).immich_app_branch_subdomain.value }}
            - Backend URL: ${{ fromJson(steps.clean.outputs.backend).data_api_url.value }}
          emojis: 'rocket'
          body-include: '<!-- web PR URL -->'
